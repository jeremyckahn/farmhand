# Dockerfile for Farmhand

# ---- Stage 1: Build ----
# This stage builds the React application using a Node.js environment.
FROM node:22-alpine AS builder

# Set the working directory in the container
WORKDIR /app

# Copy the the application source code into the working directory.
COPY ../ .

# Install project dependencies using npm ci. `npm ci` is generally faster and
# more reliable for CI/build environments as it installs exact versions from
# package-lock.json.
RUN npm ci --legacy-peer-deps

ENV VITE_API_ROOT=http://farmhand_e2e_api:3001/
ENV VITE_TRACKER_URL=ws://farmhand_e2e_tracker:8000

# Build the application for production. This command runs the "build" script
# defined in the package.json (e.g., "vite build"). The output will be in the
# directory specified in vite.config.js.
RUN npm run build

# ---- Stage 2: Serve ----
# This stage serves the built application using Vite's preview server.
# It also uses a Node.js environment.
FROM node:22-alpine

# Set the working directory
WORKDIR /app

# Copy the build output (static assets) from the 'builder' stage to the current stage.
# This takes the contents of /app/dist from the builder stage and copies it to /app/dist here.
COPY --from=builder /app/dist ./dist

# Needed for consistent Vite configuration inside and outside of the container.
COPY --from=builder /app/vite.config.js ./vite.config.js
COPY --from=builder /app/manifest.js ./manifest.js
COPY --from=builder /app/vercel.json ./vercel.json

# Copy package.json. This might not be strictly necessary for `vite preview` itself if all it needs
# are the static files, but it's good practice if any runtime configuration might be read from it
# or if other utilities from node_modules might be used.
COPY package.json ./

# Copy the node_modules from the 'builder' stage.
# This is crucial because it includes Vite (and its dependencies), which is required to run `vite preview`.
COPY --from=builder /app/node_modules ./node_modules

# Install curl for the health check
# The health check uses 'curl', which is not included in the base alpine image by default.
RUN apk add --no-cache curl=8.14.1-r1

# Expose the port the application will run on.
EXPOSE 3000

CMD ["npm", "run", "e2e:serve-app"]
